# Generated by Django 4.2.13 on 2024-07-09 23:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import modelcluster.fields
import taggit.managers
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("wagtailcore", "0093_uploadedfile"),
        ("taggit", "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Article",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "content",
                    wagtail.fields.StreamField(
                        [
                            ("text", wagtail.blocks.RichTextBlock()),
                            ("image", wagtail.images.blocks.ImageChooserBlock()),
                            ("warning", wagtail.blocks.TextBlock()),
                            ("info", wagtail.blocks.TextBlock()),
                        ]
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=80, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="core.category",
                        verbose_name="parent",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Categories",
            },
        ),
        migrations.CreateModel(
            name="ChangeRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[
                            ("requested", "requested"),
                            ("accepted", "accepted"),
                            ("rejected", "rejected"),
                        ],
                        default="requested",
                        max_length=100,
                        no_check_for_status=True,
                        verbose_name="status",
                    ),
                ),
                (
                    "status_changed",
                    model_utils.fields.MonitorField(
                        default=django.utils.timezone.now,
                        monitor="status",
                        verbose_name="status changed",
                    ),
                ),
                (
                    "requester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="change_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Community",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="communities",
                        to="core.category",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Communities",
            },
        ),
        migrations.CreateModel(
            name="RedditAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("username", models.CharField(max_length=60, unique=True)),
                ("rejected_invite", models.BooleanField(default=False)),
                ("marked_as_spammer", models.BooleanField(default=False)),
                ("marked_as_bot", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="RedditCommunity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("over18", models.BooleanField(default=False)),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("active", "Active"),
                            (
                                "inactive",
                                "Inactive (Lingering community or Infrequent Content posted)",
                            ),
                            ("abandoned", "Abandoned"),
                            ("closed", "Closed"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("metadata", models.JSONField(blank=True, null=True)),
                ("locked", models.BooleanField(default=False)),
                ("hidden", models.BooleanField(default=False)),
                ("last_synced_at", models.DateTimeField(null=True)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="subreddits",
                        to="core.category",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Subreddits",
            },
        ),
        migrations.CreateModel(
            name="UserAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "lemmy_local_username",
                    models.CharField(blank=True, max_length=255, null=True, unique=True),
                ),
                (
                    "reddit_account",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="portal_account",
                        to="core.redditaccount",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="account",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RedditSubmission",
            fields=[
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[
                            ("retrieved", "retrieved"),
                            ("accepted", "accepted"),
                            ("rejected", "rejected"),
                            ("failed", "failed"),
                            ("mirrored", "mirrored"),
                        ],
                        default="retrieved",
                        max_length=100,
                        no_check_for_status=True,
                        verbose_name="status",
                    ),
                ),
                (
                    "status_changed",
                    model_utils.fields.MonitorField(
                        default=django.utils.timezone.now,
                        monitor="status",
                        verbose_name="status changed",
                    ),
                ),
                ("id", models.CharField(max_length=16, primary_key=True, serialize=False)),
                ("url", models.URLField(db_index=True)),
                ("title", models.TextField()),
                ("selftext", models.TextField(blank=True, null=True)),
                ("selftext_html", models.TextField(blank=True, null=True)),
                ("media_only", models.BooleanField(default=False)),
                ("approved_at", models.DateTimeField(null=True)),
                ("banned_at", models.DateTimeField(null=True)),
                ("archived", models.BooleanField(default=False)),
                ("locked", models.BooleanField(default=False)),
                ("quarantined", models.BooleanField(default=False)),
                ("removed", models.BooleanField(default=False)),
                ("over_18", models.BooleanField(default=False)),
                ("marked_as_spam", models.BooleanField(default=False)),
                ("marked_as_duplicate", models.BooleanField(default=False)),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="posts",
                        to="core.redditaccount",
                    ),
                ),
                (
                    "subreddit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to="core.redditcommunity",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RedditComment",
            fields=[
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[
                            ("retrieved", "retrieved"),
                            ("accepted", "accepted"),
                            ("rejected", "rejected"),
                            ("failed", "failed"),
                            ("mirrored", "mirrored"),
                        ],
                        default="retrieved",
                        max_length=100,
                        no_check_for_status=True,
                        verbose_name="status",
                    ),
                ),
                (
                    "status_changed",
                    model_utils.fields.MonitorField(
                        default=django.utils.timezone.now,
                        monitor="status",
                        verbose_name="status changed",
                    ),
                ),
                ("id", models.CharField(max_length=16, primary_key=True, serialize=False)),
                ("permalink", models.URLField(db_index=True)),
                ("body", models.TextField(blank=True)),
                ("body_html", models.TextField(blank=True)),
                ("stickied", models.BooleanField(default=False)),
                ("edited", models.BooleanField(default=False)),
                ("distinguished", models.BooleanField(default=False)),
                ("marked_as_spam", models.BooleanField(default=False)),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="comments",
                        to="core.redditaccount",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="children",
                        to="core.redditcomment",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="core.redditsubmission",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="redditaccount",
            name="subreddits",
            field=models.ManyToManyField(blank=True, to="core.redditcommunity"),
        ),
        migrations.CreateModel(
            name="PageRelatedLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("sort_order", models.IntegerField(blank=True, editable=False, null=True)),
                ("name", models.CharField(max_length=255)),
                ("url", models.URLField()),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="related",
                        to="core.article",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LemmyMirroredPost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("lemmy_post_id", models.PositiveIntegerField(db_index=True)),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reddit_crossposts",
                        to="core.community",
                    ),
                ),
                (
                    "reddit_submission",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="lemmy_mirrored_posts",
                        to="core.redditsubmission",
                    ),
                ),
            ],
            options={
                "unique_together": {
                    ("reddit_submission", "lemmy_post_id"),
                    ("reddit_submission", "community"),
                },
            },
        ),
        migrations.CreateModel(
            name="Instance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("domain", models.CharField(max_length=255, unique=True)),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("active", "Active"),
                            ("abandoned", "Abandoned"),
                            ("closed", "Closed"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=30, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("over18", models.BooleanField(default=False)),
                ("open_registrations", models.BooleanField(default=False)),
                (
                    "software",
                    models.CharField(
                        choices=[
                            ("lemmy", "Lemmy"),
                            ("kbin", "Kbin"),
                            ("mbin", "Mbin"),
                            ("mastodon", "Mastodon"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="instances",
                        to="core.category",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FediversedInstance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("allows_reddit_signup", models.BooleanField(default=True)),
                ("allows_reddit_mirrored_content", models.BooleanField(default=False)),
                (
                    "accepts_community_requests",
                    models.BooleanField(default=False, help_text="Accepts Community Requests"),
                ),
                (
                    "instance",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fediverser_configuration",
                        to="core.instance",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CommunityRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "status",
                    model_utils.fields.StatusField(
                        choices=[
                            ("requested", "requested"),
                            ("accepted", "accepted"),
                            ("rejected", "rejected"),
                        ],
                        default="requested",
                        max_length=100,
                        no_check_for_status=True,
                        verbose_name="status",
                    ),
                ),
                (
                    "status_changed",
                    model_utils.fields.MonitorField(
                        default=django.utils.timezone.now,
                        monitor="status",
                        verbose_name="status changed",
                    ),
                ),
                (
                    "fulfilled_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="creation_requests",
                        to="core.community",
                    ),
                ),
                (
                    "instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_requests",
                        to="core.instance",
                    ),
                ),
                (
                    "requested_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "subreddit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_requests",
                        to="core.redditcommunity",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CommunityInviteTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("message", models.TextField()),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invite_templates",
                        to="core.community",
                    ),
                ),
                (
                    "subreddit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invite_templates",
                        to="core.redditcommunity",
                    ),
                ),
            ],
            options={
                "unique_together": {("subreddit", "community")},
            },
        ),
        migrations.CreateModel(
            name="CommunityInvite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "redditor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invites",
                        to="core.redditaccount",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="invites_sent",
                        to="core.communityinvitetemplate",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="community",
            name="instance",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="communities",
                to="core.instance",
            ),
        ),
        migrations.AddField(
            model_name="community",
            name="tags",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="taggit.TaggedItem",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.CreateModel(
            name="SetRedditCommunityStatus",
            fields=[
                (
                    "changerequest_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.changerequest",
                    ),
                ),
                (
                    "community_status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            (
                                "inactive",
                                "Inactive (Lingering community or Infrequent Content posted)",
                            ),
                            ("abandoned", "Abandoned"),
                            ("closed", "Closed"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "subreddit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="status_change_requests",
                        to="core.redditcommunity",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("core.changerequest",),
        ),
        migrations.CreateModel(
            name="SetRedditCommunityCategory",
            fields=[
                (
                    "changerequest_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.changerequest",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.category"
                    ),
                ),
                (
                    "subreddit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="category_change_requests",
                        to="core.redditcommunity",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("core.changerequest",),
        ),
        migrations.CreateModel(
            name="SetInstanceStatus",
            fields=[
                (
                    "changerequest_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.changerequest",
                    ),
                ),
                (
                    "server_status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("abandoned", "Abandoned"),
                            ("closed", "Closed"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="status_change_requests",
                        to="core.instance",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("core.changerequest",),
        ),
        migrations.CreateModel(
            name="SetInstanceCategory",
            fields=[
                (
                    "changerequest_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.changerequest",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.category"
                    ),
                ),
                (
                    "instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="category_change_requests",
                        to="core.instance",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("core.changerequest",),
        ),
        migrations.CreateModel(
            name="SetCommunityStatus",
            fields=[
                (
                    "changerequest_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.changerequest",
                    ),
                ),
                (
                    "community_status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            (
                                "inactive",
                                "Inactive (Lingering community or Infrequent Content posted)",
                            ),
                            ("abandoned", "Abandoned"),
                            ("closed", "Closed"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="status_change_requests",
                        to="core.community",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("core.changerequest",),
        ),
        migrations.CreateModel(
            name="SetCommunityCategory",
            fields=[
                (
                    "changerequest_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.changerequest",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.category"
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="category_change_requests",
                        to="core.community",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("core.changerequest",),
        ),
        migrations.CreateModel(
            name="RedditMirrorStrategy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "automatic_submission_policy",
                    models.TextField(
                        choices=[
                            ("Disabled", "No automatic submission allowed"),
                            ("Link Only", "Only external links"),
                            ("Self Only", "Only self-posts"),
                            ("Full", "All submissions"),
                        ],
                        default="Disabled",
                        max_length=16,
                    ),
                ),
                (
                    "automatic_comment_policy",
                    models.TextField(
                        choices=[
                            ("Disabled", "Comment threads will not be mirrored"),
                            ("Link Only", "Mirror comment threads for external links"),
                            ("Self Only", "Mirror comment threads for self-posts"),
                            ("Full", "Mirror all comment threads"),
                        ],
                        default="Disabled",
                        max_length=16,
                    ),
                ),
                (
                    "automatic_submission_limit",
                    models.SmallIntegerField(
                        blank=True,
                        help_text="Limit of maximum automatic submissions per 24h",
                        null=True,
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.community"
                    ),
                ),
                (
                    "subreddit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.redditcommunity"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Reddit Mirror Strategies",
                "unique_together": {("subreddit", "community")},
            },
        ),
        migrations.CreateModel(
            name="RedditAlternativeRecommendation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendations",
                        to="core.community",
                    ),
                ),
                (
                    "subreddit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendations",
                        to="core.redditcommunity",
                    ),
                ),
            ],
            options={
                "unique_together": {("subreddit", "community")},
            },
        ),
        migrations.CreateModel(
            name="RecommendCommunity",
            fields=[
                (
                    "changerequest_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.changerequest",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.community"
                    ),
                ),
                (
                    "subreddit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendation_requests",
                        to="core.redditcommunity",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("core.changerequest",),
        ),
        migrations.CreateModel(
            name="LemmyMirroredComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                ("lemmy_comment_id", models.PositiveIntegerField(db_index=True)),
                (
                    "lemmy_mirrored_post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="core.lemmymirroredpost",
                    ),
                ),
                (
                    "reddit_comment",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="lemmy_mirrored_comments",
                        to="core.redditcomment",
                    ),
                ),
            ],
            options={
                "unique_together": {("lemmy_mirrored_post", "lemmy_comment_id")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="community",
            unique_together={("instance", "name")},
        ),
    ]
