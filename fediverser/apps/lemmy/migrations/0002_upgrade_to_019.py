# Generated by Django 4.2.13 on 2024-07-09 21:17

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("lemmy", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="FederationQueueState",
            fields=[
                (
                    "instance",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.instance",
                    ),
                ),
                ("last_successful_id", models.BigIntegerField(blank=True, null=True)),
                ("fail_count", models.IntegerField()),
                ("last_retry", models.DateTimeField(blank=True, null=True)),
                ("last_successful_published_time", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "federation_queue_state",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ImageUpload",
            fields=[
                ("pictrs_alias", models.TextField(primary_key=True, serialize=False)),
                ("pictrs_delete_token", models.TextField()),
                ("published", models.DateTimeField()),
            ],
            options={
                "db_table": "image_upload",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="InstanceBlock",
            fields=[
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.person",
                    ),
                ),
                ("published", models.DateTimeField()),
            ],
            options={
                "db_table": "instance_block",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LocalImage",
            fields=[
                ("pictrs_alias", models.TextField(primary_key=True, serialize=False)),
                ("pictrs_delete_token", models.TextField()),
                ("published", models.DateTimeField()),
            ],
            options={
                "db_table": "local_image",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LocalSiteUrlBlocklist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("url", models.TextField(unique=True)),
                ("published", models.DateTimeField()),
                ("updated", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "local_site_url_blocklist",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LocalUserVoteDisplayMode",
            fields=[
                (
                    "local_user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.localuser",
                    ),
                ),
                ("score", models.BooleanField(default=False)),
                ("upvotes", models.BooleanField(default=True)),
                ("downvotes", models.BooleanField(default=True)),
                ("upvote_percentage", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "local_user_vote_display_mode",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LoginToken",
            fields=[
                ("token", models.TextField(primary_key=True, serialize=False)),
                ("published", models.DateTimeField()),
                ("ip", models.TextField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "login_token",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="PostHide",
            fields=[
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.person",
                    ),
                ),
                ("published", models.DateTimeField()),
            ],
            options={
                "db_table": "post_hide",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RemoteImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("link", models.TextField(unique=True)),
                ("published", models.DateTimeField()),
            ],
            options={
                "db_table": "remote_image",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CommunityProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("lemmy.community",),
        ),
        migrations.CreateModel(
            name="InstanceProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("lemmy.instance",),
        ),
        migrations.CreateModel(
            name="LocalUserProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("lemmy.localuser",),
        ),
    ]
